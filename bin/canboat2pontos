#!/usr/bin/env python3

import sys
import json
import logging
import argparse
from typing import List, Dict, Tuple, Any

from parse import compile

## Handlers


def handler_127245(data: Dict) -> List[Tuple[str, Dict]]:
    """Rudder message"""
    output = []

    if value := data["fields"].get("Position"):
        output.append((create_topic("steering_angle_deg"), value))

    if value := data["fields"].get("Angle Order"):
        output.append((create_topic("steering_order_deg"), value))

    return output


def handler_127250(data: Dict) -> List[Tuple[str, Dict]]:
    """Heading"""
    return [(create_topic("positioningsystem_heading_deg"), data["fields"]["Heading"])]


def handler_127251(data: Dict) -> List[Tuple[str, Dict]]:
    """Rate of Turn"""
    return [(create_topic("positioningsystem_rot_degpm"), data["fields"]["Rate"])]


def handler_127257(data: Dict) -> List[Tuple[str, Dict]]:
    """Attitude"""
    return [
        (create_topic("positioningsystem_pitch_deg"), data["fields"]["Pitch"]),
        (create_topic("positioningsystem_roll_deg"), data["fields"]["Roll"]),
    ]


def handler_129026(data: Dict) -> List[Tuple[str, Dict]]:
    """COG & SOG"""
    if data["fields"]["COG Reference"] == "Magnetic":
        return []

    return [
        (create_topic("positioningsystem_cog_deg"), data["fields"]["COG"]),
        (create_topic("positioningsystem_sog_kn"), data["fields"]["SOG"]),
    ]


def handler_129029(data: Dict) -> List[Tuple[str, Dict]]:
    """GNSS Position"""
    return [
        (create_topic("positioningsystem_latitude_deg"), data["fields"]["Latitude"]),
        (create_topic("positioningsystem_longitude_deg"), data["fields"]["Longitude"]),
    ]


HANDLERS = {
    127245: handler_127245,
    127250: handler_127250,
    127251: handler_127251,
    127257: handler_127257,
    129026: handler_129026,
    129029: handler_129029,
}

PATTERN = compile("{timestamp} {data}")


## Parse command-line arguments
parser = argparse.ArgumentParser()
parser.add_argument("vessel_id", type=str)

args = parser.parse_args()


# Define some helper functions
def create_topic(tag: str, index: int = 1, prefix: str = "PONTOS"):
    return f"{prefix}/{args.vessel_id}/{tag}/{index}"


def create_payload(timestamp: str, value: Any) -> Dict:
    return {"timestamp": timestamp, "value": value}


## Processing loop
for line in sys.stdin:
    if not (res := PATTERN.parse(line)):
        logging.error(
            f"Line {line} did not look as expected: '<timestamp> <canboat json output>'"
        )
        continue

    try:
        data = json.loads(res["data"])
    except json.JSONDecodeError:
        logging.error(f"Failed to JSON decode data: {data}")
        continue

    if pgn := data.get("pgn"):
        if handler := HANDLERS.get(pgn):
            for topic, value in handler(data):
                payload = create_payload(res["timestamp"], value)
                sys.stdout.write(f"{topic} {payload}\n")

            sys.stdout.flush()
        else:
            logging.warning(f"No handler found for PGN: {pgn}")
